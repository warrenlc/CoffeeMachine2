type: edu
custom_name: stage6
files:
- name: src/machine/CoffeeMachine.java
  visible: true
  text: "package machine;\n\nimport java.util.List;\nimport java.util.ArrayList;\n\
    import java.util.Scanner;\n\npublic class CoffeeMachine {\n    public static void\
    \ main(String[] args) {\n        Scanner scan = new Scanner(System.in);\n    \
    \    System.out.println(\"Write how many cups of coffee you will need: \");\n\
    \        \n        int cups = Integer.valueOf(scan.nextLine());\n        \n  \
    \      System.out.println(\"For \" + cups + \" cups of coffee you will need: \"\
    );\n        System.out.println(printWater(getWater(cups)));\n        System.out.println(printMilk(getMilk(cups)));\n\
    \        System.out.println(printBeans(getBeans(cups)));\n        \n    }\n  \
    \  \n    public static int getWater(int cups) {\n        return 200 * cups;\n\
    \    }\n    \n    public static String printWater(int water) {\n        return\
    \ water + \" ml of water\";\n    }\n    \n    public static int getMilk(int cups)\
    \ {\n        return 50 * cups;\n    }\n    \n    public static String printMilk(int\
    \ milk) {\n        return milk + \" ml of milk\";\n    }\n    \n    public static\
    \ int getBeans(int cups) {\n        return 15 * cups;\n    }\n    \n    public\
    \ static String printBeans(int beans) {\n        return beans + \" g of coffee\
    \ beans\";\n    }\n}\n"
  learner_created: false
- name: test/CoffeeMachineTest.java
  visible: false
  text: |
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testcase.TestCase;

    import java.util.ArrayList;
    import java.util.List;


    class TestClue {
        int water;
        int milk;
        int beans;
        int cups;
        int money;
        String feedback;
        TestClue(int w, int m, int b, int c, int mo, String feedback) {
            water = w;
            milk = m;
            beans = b;
            cups = c;
            money = mo;
            this.feedback = feedback;
        }
    }

    public class CoffeeMachineTest extends StageTest<TestClue> {

        @Override
        public List<TestCase<TestClue>> generate() {
            return List.of(
                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                        700 - 400,
                        390 - 540,
                        80 - 120 ,
                        7 - 9,
                        0 - 550,
                        "This test is exactly " +
                            "like in the example - try to run it by yourself"))
                    .setInput(
                        "remaining\n" +
                            "buy\n" +
                            "2\n" +
                            "buy\n" +
                            "2\n" +
                            "fill\n" +
                            "1000\n" +
                            "0\n" +
                            "0\n" +
                            "0\n" +
                            "buy\n" +
                            "2\n" +
                            "take\n" +
                            "remaining\n" +
                            "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                        3000,
                        3000,
                        3000 ,
                        3000,
                        0,
                        "This test checks \"fill\" action"))
                    .setInput(
                        "remaining\n" +
                            "fill\n" +
                            "3000\n" +
                            "3000\n" +
                            "3000\n" +
                            "3000\n" +
                            "remaining\n" +
                            "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                        -250,
                        0,
                        -16 ,
                        -1,
                        4, "This test checks \"buy\" " +
                        "action with the first variant of coffee"))
                    .setInput(
                        "remaining\n" +
                            "buy\n" +
                            "1\n" +
                            "remaining\n" +
                            "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                        -350,
                        -75,
                        -20 ,
                        -1,
                        7, "This test checks \"buy\" " +
                        "action with the second variant of coffee"))
                    .setInput(
                        "remaining\n" +
                            "buy\n" +
                            "2\n" +
                            "remaining\n" +
                            "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                        -200,
                        -100,
                        -12 ,
                        -1,
                        6, "This test checks \"buy\" " +
                        "action with the third variant of coffee"))
                    .setInput(
                        "remaining\n" +
                            "buy\n" +
                            "3\n" +
                            "remaining\n" +
                            "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                        0,
                        0,
                        0 ,
                        0,
                        -550, "This test checks \"take\" action"))
                    .setInput(
                        "remaining\n" +
                            "take\n" +
                            "remaining\n" +
                            "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                        0,
                        0,
                        0 ,
                        0,
                        0, "This test checks \"back\" " +
                        "action right after \"buy\" action"))
                    .setInput(
                        "remaining\n" +
                            "buy\n" +
                            "back\n" +
                            "remaining\n" +
                            "exit\n")
            );
        }

        @Override
        public CheckResult check(String reply, TestClue clue) {
            String[] lines = reply.split("\\n");

            if (lines.length <= 1) {
                return CheckResult.wrong("Looks like you didn't print anything!");
            }

            int water_ = clue.water;
            int milk_ = clue.milk;
            int beans_ = clue.beans;
            int cups_ = clue.cups;
            int money_ = clue.money;

            List<Integer> milk = new ArrayList<>();
            List<Integer> water = new ArrayList<>();
            List<Integer> beans = new ArrayList<>();
            List<Integer> cups = new ArrayList<>();
            List<Integer> money = new ArrayList<>();

            for (String line : lines) {
                line = line.replace("$", "").trim();
                String[] words = line.split("\\s+");
                if (words.length == 0) {
                    continue;
                }
                String firstWord = words[0];
                int amount;
                try {
                    amount = Integer.parseInt(firstWord);
                }
                catch (Exception e) {
                    continue;
                }
                if (line.contains("milk")) {
                    milk.add(amount);
                }
                else if (line.contains("water")) {
                    water.add(amount);
                }
                else if (line.contains("beans")) {
                    beans.add(amount);
                }
                else if (line.contains("cups")) {
                    cups.add(amount);
                }
                else if (line.contains("money")) {
                    money.add(amount);
                }
            }

            if (milk.size() != 2) {
                return new CheckResult(false,
                    "There should be two lines with \"milk\", " +
                        "found: " + milk.size());
            }

            if (water.size() != 2) {
                return new CheckResult(false,
                    "There should be two lines with \"water\", " +
                        "found: " + water.size());
            }

            if (beans.size() != 2) {
                return new CheckResult(false,
                    "There should be two lines with \"beans\", " +
                        "found: " + beans.size());
            }

            if (cups.size() != 2) {
                return new CheckResult(false,
                    "There should be two lines with \"cups\", " +
                        "found: " + cups.size());
            }

            if (money.size() != 2) {
                return new CheckResult(false,
                    "There should be two lines with \"money\", " +
                        "found: " + money.size());
            }

            int milk0 = milk.get(0);
            int milk1 = milk.get(milk.size() - 1);

            int water0 = water.get(0);
            int water1 = water.get(water.size() - 1);

            int beans0 = beans.get(0);
            int beans1 = beans.get(beans.size() - 1);

            int cups0 = cups.get(0);
            int cups1 = cups.get(cups.size() - 1);

            int money0 = money.get(0);
            int money1 = money.get(money.size() - 1);

            int diffWater = water1 - water0;
            int diffMilk = milk1 - milk0;
            int diffBeans = beans1 - beans0;
            int diffCups = cups1 - cups0;
            int diffMoney = money1 - money0;

            boolean isCorrect =
                diffWater == water_ &&
                    diffMilk == milk_ &&
                    diffBeans == beans_ &&
                    diffCups == cups_ &&
                    diffMoney == money_;

            return new CheckResult(isCorrect, clue.feedback);
        }
    }
  learner_created: false
- name: src/machine/State.java
  visible: true
  text: |
    package machine;

    public enum State {
        READY,
        SHUTDOWN,
        ADD_WATER,
        ADD_BEANS,
        ADD_MILK,
        ADD_CUPS,
        MAKE_COFFEE
    }
  learner_created: true
- name: src/machine/Machine.java
  visible: true
  text: |2+


    package machine;

    public class Machine {
        private int water;
        private int beans;
        private int milk;
        private int disposableCups;
        private int money;
        private String userInput;
        private State state;


        public Machine(int water, int beans, int milk, int disposableCups, int money) {
            this.water = water;
            this.beans = beans;
            this.milk = milk;
            this.disposableCups = disposableCups;
            this.money = money;
            this.state = State.READY;
        }

        public State getState() {
            return this.state;
        }

        public void shutDown() {
            this.state = State.SHUTDOWN;
        }

        public void ready() {
            this.state = State.READY;
            System.out.println("Write action (buy, fill, take remaining, exit): ");
        }

        public void readUserInput(String command) {
            this.userInput = command;

            switch (this.state) {
                case READY:

            }
        }

        public void buyEspresso() {
            this.water = this.water - 250;
            this.beans = this.beans - 16;
            this.money = this.money + 4;
            this.disposableCups--;
        }

        public void buyLatte() {
            this.water -= 350;
            this.beans -= 20;
            this.milk -= 75;
            this.money += 7;
            this.disposableCups--;
        }

        public void buyCappuccino() {
            this.water -= 200;
            this.beans -= 12;
            this.milk -= 100;
            this.money += 6;
            this.disposableCups--;
        }

        public int getCups() {
            return this.disposableCups;
        }

        public int getMoney() {
            return this.money;
        }

        public int getWater() {
            return this.water;
        }

        public int getMilk() {
            return this.milk;
        }

        public int getBeans() {
            return this.beans;
        }

        public void addWater(int amount) {
            this.water = this.water + amount;
        }

        public void addBeans(int amount) {
            this.beans = this.beans + amount;
        }

        public void addMilk(int amount) {
            this.milk = this.milk + amount;
        }

        public void addCups(int amount) {
            this.disposableCups += amount;
        }

        public void takeMoney() {
            this.money = 0;
        }

        public boolean canMakeEspresso() {
            return this.getWater() >= 250 && this.getBeans() >= 16;
        }

        public boolean canMakeLatte() {
            return this.getWater() >= 350 && this.getMilk() >= 75 && this.getBeans() >= 20;
        }

        public boolean canMakeCappuccino() {
            return this.getWater() >= 200 && this.getMilk() >= 100 && this.getBeans() >= 12;
        }

        public String espressoResources() {
            StringBuilder espresso = new StringBuilder();
            String espressoIngredients;
            if (this.getWater() < 250) {
                espresso.append("water");
            }
            if (this.getBeans() < 16) {
                espresso.append("beans");
            }
            if (this.getCups() == 0) {
                espresso.append("cups");
            }
            espressoIngredients = espresso.toString();
            return espressoIngredients;
        }

        public String latteResources() {
            StringBuilder latte = new StringBuilder();
            String latteIngredients;
            if (this.getWater() < 350) {
                latte.append("water");
            }
            if (this.getBeans() < 20) {
                latte.append("beans");
            }
            if (this.getMilk() < 75) {
                latte.append("milk");
            }
            if (this.getCups() == 0) {
                latte.append("cups");
            }
            latteIngredients = latte.toString();
            return latteIngredients;
        }

        public String cappuccinoResources() {
            StringBuilder cappuccino = new StringBuilder();
            String cappuccinoIngredients;
            if (this.getWater() < 200) {
                cappuccino.append("water");
            }
            if (this.getBeans() < 12) {
                cappuccino.append("beans");
            }
            if (this.getMilk() < 100) {
                cappuccino.append("milk");
            }
            if (this.getCups() == 0){
                cappuccino.append("cups");
            }
            cappuccinoIngredients = cappuccino.toString();
            return cappuccinoIngredients;
        }

    }





  learner_created: true
- name: src/machine/UserInterface.java
  visible: true
  text: |
    package machine;

    import java.util.Scanner;

    public class UserInterface {
        private final Scanner scanner;


        public UserInterface(Scanner scanner) {
            this.scanner = scanner;
        }

        public void start() {
            Machine machine = new Machine(400, 120, 540, 9, 550);


            while(true) {
                String action = writeAction();
                if (action.equals("exit")) {
                    break;
                }
                if (action.equals("remaining")) {
                    printStatus(machine);
                }
                if (action.equals("buy")) {
                    buy(machine);
                }
                if (action.equals("fill")) {
                    fill(machine);
                }
                if (action.equals("take")) {
                    take(machine);
                }
            }

        }

        public static void printStatus(Machine machine) {
            System.out.println("The coffee machine has: \n" +
                    machine.getWater() + " ml of water \n" +
                    machine.getMilk() + " ml of milk \n" +
                    machine.getBeans() + " g of coffee beans \n" +
                    machine.getCups() + " disposable cups \n" +
                    "$" + machine.getMoney() + " of money");
        }

        public void buy(Machine machine) {
            System.out.println("What do you want to buy? 1 - espresso, 2 - latte, 3 - cappuccino:");
            String toBuy = scanner.nextLine();
            label:
            while(true) {
                if (toBuy.equals("back")) {
                    break;
                }
                switch (toBuy) {
                    case "1":
                        if (machine.canMakeEspresso()) {
                            makingCoffee();
                            machine.buyEspresso();
                            break label;
                        } else {
                            noCoffee(machine, "espresso");
                            break label;
                        }
                    case "2":
                        if (machine.canMakeLatte()) {
                            makingCoffee();
                            machine.buyLatte();
                            break label;
                        } else {
                            noCoffee(machine, "latte");
                            break label;
                        }
                    case "3":
                        if (machine.canMakeCappuccino()) {
                            makingCoffee();
                            machine.buyCappuccino();
                            break label;
                        } else {
                            noCoffee(machine, "cappuccino");
                            break label;
                        }
                }
            }
        }

        public String writeAction() {
            System.out.println("Write action (buy, fill, take, remaining, exit):");
            return scanner.nextLine();
        }

        public void makingCoffee() {
            System.out.println("I have enough resources, making you a coffee!");
        }

        public void noCoffee(Machine machine, String coffee) {
            StringBuilder resource = new StringBuilder();
            switch (coffee) {
                case("espresso"): resource.append(machine.espressoResources());
                    break;
                case("latte"): resource.append(machine.latteResources());
                    break;
                case("cappuccino"): resource.append(machine.cappuccinoResources());
                    break;
            }
            System.out.printf("Sorry, not enough %s!%n", resource);
        }


        public void fill(Machine machine) {

            System.out.println("Write how many ml of water you want to add:");
            int fillWater = Integer.parseInt(scanner.nextLine());
            machine.addWater(fillWater);

            System.out.println("Write how many ml of milk you want to add:");
            int fillMilk = Integer.parseInt(scanner.nextLine());
            machine.addMilk(fillMilk);

            System.out.println("Write how many grams of coffee beans you want to add:");
            int fillBeans = Integer.parseInt(scanner.nextLine());
            machine.addBeans(fillBeans);

            System.out.println("Write how many disposable cups of coffee you want to add:");
            int fillCups = Integer.parseInt(scanner.nextLine());
            machine.addCups(fillCups);

        }

        public void take(Machine machine) {
            System.out.println("I gave you $" + machine.getMoney());
            machine.takeMoney();
        }

    }
  learner_created: true
feedback_link: https://hyperskill.org/projects/33/stages/180/implement#comment
status: Solved
feedback:
  message: Well done! You've finished the project. Select a new project on <a href="https://hyperskill.org/projects">JetBrains
    Academy</a> to continue learning.
  time: Thu, 28 Oct 2021 13:23:20 UTC
record: -1
